{"name":"Nglog","tagline":"","body":"# Features:\r\n\r\n* Prevents logging when console is unavailable\r\n* Creates a logging history for reviewing\r\n* Context logging:\r\n + Each instance of the logger will be grouped by a defined context \r\n + Each context will log with its own color to identify contexts more easily\r\n* Muted Logs via filter:\r\n + The property Options and Filters will be inherited by every child within a Logger\r\n + ContextMute can be set via filterLogging(): this allows to set a ngLog.Level, which will mute all logging levels below than that Level.\r\n + ContextMute can be also set by muteLoggingBut(): this allows to set a ngLog.Level, which will mute all logging levels except the one provided.\r\n\r\n* Timestamp format can be configured through the LoggerProvider\r\n\r\n# Sample Usage:\r\n\r\n**Logging**\r\n* Step 1: Inject ngLogModule as a dependency \r\n```javascript\r\n  app.module('mySampleModule',['ngLogModule']);\r\n```\r\n* Step 2: Inject ngLog provider to wherever you need a Logger\r\n```javascript\r\n  app.module('mySampleModule')\r\n     .controller('sampleController', ['ngLog', function(ngLog){\r\n       // controller implementation\r\n     }]);\r\n```\r\n* Step 3: create a new instance of the logger with the desired context name\r\n```javascript\r\n  var firstLogger = ngLog.get('firstLogger');\r\n  firstLogger.log('Log example'); // Will output: 'Log example'\r\n```\r\n\r\n**Logger hierarchy and filter/mute inheritance**\r\n* You can get a new Logger instance from the injected service:\r\n```javascript\r\n  var firstLogger = ngLog.get('firstLogger');\r\n  firstLogger.filterLogging(ngLog.Levels.DEBUG);\r\n  firstLogger.log('Log example'); // Won't output anything\r\n```\r\n* You can also have a nested Logger that will inherit the parents mute/filter options:\r\n```javascript\r\n  var firstLogger = ngLog.get('firstLogger');\r\n  firstLogger.filterLogging(ngLog.Levels.DEBUG);\r\n  var firstLoggerChild = ngLog.get('firstLogger.firstChild');\r\n  firstLogger.log('Log example'); // Won't output anything\r\n  firstLoggerChild.log('Log example'); // Won't output anything\r\n  firstLoggerChild.debug('Another log example') // Will output: 'Another log example'\r\n```\r\n* Or you could just create the child Logger from the parent:\r\n```javascript\r\n  var firstLogger = ngLog.get('firstLogger');\r\n  firstLogger.filterLogging(ngLog.Levels.DEBUG);\r\n  var firstLoggerChild = firstLogger.get('firstChild');\r\n  firstLogger.log('Log example'); // Won't output anything\r\n  firstLoggerChild.log('Log example'); // Won't output anything\r\n  firstLoggerChild.debug('Another log example') // Will output: 'Another log example'\r\n```\r\n* If there is a branch in the hierarchy missing, it will be automatically created:\r\n```javascript\r\n  var firstLogger = ngLog.get('firstLogger');\r\n  firstLogger.filterLogging(ngLog.Levels.DEBUG);\r\n  var firstLoggerGrandChild = ngLog.get('firstLogger.firstChild.firtGrandChild');\r\n  firstLogger.log('Log example'); // Won't output anything\r\n  firstLoggerGrandChild.log('Log example'); // Won't output anything\r\n  firstLoggerGrandChild.info(firstLoggerGrandChild.$parent.context) // Will output: 'firstLogger.firstChild'\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}